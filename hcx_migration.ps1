#-------Importing the VMware.VimAutomation.Hcx module------#
$moduleHCX = Get-InstalledModule -Name VMware.VimAutomation.Hcx
if (!$moduleHCX) {
    throw "Required module 'VMware.VimAutomation.Hcx' is missing. Please install using: InstalledModule VMware.VimAutomation.Hcx"
}
if ([version]$moduleHCX.version -lt [version]"11.5") {
    throw "Required module 'VMware.VimAutomation.Hcx' needs to be updated to 11.5+. Please upgrade it using: Update-Module VMware.VimAutomation.Hcx"
}

Import-Module VMware.VimAutomation.Hcx


<##################################

# Uninstall the existing VMware.VimAutomation.Hcx module if installed
$existingModule = Get-InstalledModule -Name VMware.VimAutomation.Hcx -ErrorAction SilentlyContinue
if ($existingModule) {
    Write-Host "Uninstalling existing VMware.VimAutomation.Hcx module version $($existingModule.Version)"
    Uninstall-Module VMware.VimAutomation.Hcx -Force
}

# Install the latest version of VMware.VimAutomation.Hcx module
Write-Host "Installing the latest VMware.VimAutomation.Hcx module"
Install-Module VMware.VimAutomation.Hcx -Force

# Import the VMware.VimAutomation.Hcx module
Write-Host "Importing the VMware.VimAutomation.Hcx module"
Import-Module VMware.VimAutomation.Hcx

###################################>

#------ Connecting to HCX ------#

#variables
$source_hcx_name = ''
$source_hcx_user = ''
$source_hcx_pw = ''
$destination_vc_name = ''
$destination_hcx_name = ''

#Connecting to source HCX
Write-Host("Connecting to the source HCX")
Connect-HCXServer -Server $source_hcx_name -Username $source_hcx_user -Password $source_hcx_pw

#Get HCX Site Objects
$source_hcx = Get-HCXSite -Source
Write-Host('source hcx: ' + $source_hcx)
$destination_hcx = Get-HCXSite -Destination -Name $destination_vc_name -ErrorAction SilentlyContinue
Write-Host('destination hcx: ' + $destination_hcx)

#----- NetworkExtension -----#
#Variables
$ne_L2C_name = ""
$ne_segment_name = ""
$ne_segment_gw = ""
$ne_segment_mask = ""

#create network extension
Write-Host("Creating Network extension")
$hcx_gw = Get-HCXGateway -DestinationSite $destination_hcx
$L2C_appliance = Get-HCXAppliance -Type L2Concentrator -Name $ne_L2C_name
$ne_segment = Get-HCXNetwork -Name $ne_segment_name

New-HCXNetworkExtension -Appliance $L2C_appliance `
    -Network $ne_segment `
    -SourceSite $source_hcx -DestinationSite $destination_hcx `
    -DestinationGateway $hcx_gw `
    -GatewayIp $ne_segment_gw `
    -Netmask $ne_segment_mask

#------ Migrating VM ------#

#variables
$destination_compute = Get-HCXContainer -Name "" -Site $destination_hcx
Write-Host('destination_compute: ' + $destination_compute)
$destination_folder = Get-HCXContainer -Name "" -Site $destination_hcx
Write-Host('destination_folder: ' + $destination_folder)
$destination_datastore = Get-HCXDatastore -Name "" -Site $destination_hcx
Write-Host('destination_datastore: ' + $destination_datastore)
$source_network = Get-HCXNetwork -Name "" -Type DistributedVirtualPortgroup -Site $source_hcx
$source_hcx
Write-Host('source_network: ' + $source_network)
$destination_network = Get-HCXNetwork -Name "" -Type NsxtSegment -Site $destination_hcx
$destination_hcx
Write-Host('destination_network: ' + $destination_network)
$network_mapping = New-HCXNetworkExtension -SourceNetwork $source_network -DestinationNetwork $destination_network
Write-Host('network_mapping: ' + $network_mapping)

# Create an array of VM objects
$vms = @(
    Get-HCXVM -Name "VM1",
    Get-HCXVM -Name "VM2",
    Get-HCXVM -Name "VM3"
)

# Create an array to store migration objects
$migrations = @()

# Loop through each VM and execute the migration
foreach ($vm in $vms) {
    Write-Host "Migrating VM: $($vm.Name)"
    $new_migration = New-HCXMigration -VM $vm `
        -MigrationType vMotion `
        -SourceSite $source_hcx `
        -DestinationSite $destination_hcx `
        -TargetComputeContainer $destination_compute `
        -Folder $destination_folder `
        -TargetDatastore $destination_datastore `
        -NetworkMapping $network_mapping `
        -DiskProvisionType SameAsSource `
        -UpgradeVMTools $False `
        -RetainMac $true `
        -UpgradeHardware $False `
        -RemoveSnapshots $False `
        -RemoveISOs $False `
        -ForcePowerOffVM $False

    Write-Host "Validating the migration for $($vm.Name)"
    Test-HCXMigration -Migration $new_migration

    Write-Host "Adding migration object for $($vm.Name) to the migration group"
    $migrations += $new_migration
}

# Create an HCX migration group for all VMs
Write-Host "Creating HCX migration group"
$new_migration_group = New-HCXMigrationGroup -Migrations $migrations

# Start the HCX migration group
Write-Host "Starting the HCX migration group"
Start-HCXMigrationGroup -MigrationGroup $new_migration_group -Confirm:$False
